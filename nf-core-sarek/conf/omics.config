params {
    ecr_registry = '733263974272.dkr.ecr.us-west-2.amazonaws.com'
    outdir = '/mnt/workflow/pubdir'
}

manifest {
    nextflowVersion = '!>=22.04.0'
}

conda {
    enabled = false
}

docker {
    enabled = true
    registry = params.ecr_registry
}

process {
withName: '.*' { conda = null }
withName: '(.+:)?BUILD_INTERVALS' { container = 'quay/biocontainers/gawk:5.1.0' }
withName: '(.+:)?CREATE_INTERVALS_BED' { container = 'quay/biocontainers/gawk:5.1.0' }
withName: '(.+:)?CAT_CAT' { container = 'quay/biocontainers/pigz:2.3.4' }
withName: '(.+:)?CAT_FASTQ' { container = 'dockerhub/ubuntu:20.04' }
withName: '(.+:)?TABIX_TABIX' { container = 'quay/biocontainers/tabix:1.11--hdfd78af_0' }
withName: '(.+:)?TABIX_BGZIPTABIX' { container = 'quay/biocontainers/tabix:1.11--hdfd78af_0' }
withName: '(.+:)?TIDDIT_SV' { container = 'quay/biocontainers/tiddit:3.3.2--py310hc2b7f4b_0' }
withName: '(.+:)?SVDB_MERGE' { container = 'quay/biocontainers/mulled-v2-c8daa8f9d69d3c5a1a4ff08283a166c18edb0000:56d0a468970fbb474d92f0591abcf677757fb370-0' }
withName: '(.+:)?MULTIQC' { container = 'quay/biocontainers/multiqc:1.13--pyhdfd78af_0' }
withName: '(.+:)?MSISENSORPRO_SCAN' { container = 'quay/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }
withName: '(.+:)?MSISENSORPRO_MSI_SOMATIC' { container = 'quay/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }
withName: '(.+:)?UNTAR' { container = 'dockerhub/ubuntu:20.04' }
withName: '(.+:)?MOSDEPTH' { container = 'quay/biocontainers/mosdepth:0.3.3--hdfd78af_1' }
withName: '(.+:)?VCFTOOLS' { container = 'quay/biocontainers/vcftools:0.1.16--he513fc3_4' }
withName: '(.+:)?BCFTOOLS_SORT' { container = 'quay/biocontainers/bcftools:1.16--hfe4b78e_1' }
withName: '(.+:)?BCFTOOLS_STATS' { container = 'quay/biocontainers/bcftools:1.16--hfe4b78e_1' }
withName: '(.+:)?UNZIP' { container = 'quay/biocontainers/p7zip:15.09--h2d50403_4' }
withName: '(.+:)?MANTA_TUMORONLY' { container = 'quay/biocontainers/manta:1.6.0--h9ee0642_1' }
withName: '(.+:)?MANTA_GERMLINE' { container = 'quay/biocontainers/manta:1.6.0--h9ee0642_1' }
withName: '(.+:)?MANTA_SOMATIC' { container = 'quay/biocontainers/manta:1.6.0--h9ee0642_1' }
withName: '(.+:)?BWAMEM2_INDEX' { container = 'quay/biocontainers/bwa-mem2:2.2.1--he513fc3_0' }
withName: '(.+:)?BWAMEM2_MEM' { container = 'quay/biocontainers/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:2cdf6bf1e92acbeb9b2834b1c58754167173a410-0' }
withName: '(.+:)?FGBIO_FASTQTOBAM' { container = 'quay/biocontainers/fgbio:2.0.2--hdfd78af_0' }
withName: '(.+:)?FGBIO_CALLMOLECULARCONSENSUSREADS' { container = 'quay/biocontainers/fgbio:2.0.2--hdfd78af_0' }
withName: '(.+:)?FGBIO_GROUPREADSBYUMI' { container = 'quay/biocontainers/fgbio:2.0.2--hdfd78af_0' }
withName: '(.+:)?CNVKIT_BATCH' { container = 'quay/biocontainers/mulled-v2-780d630a9bb6a0ff2e7b6f730906fd703e40e98f:3bdd798e4b9aed6d3e1aaa1596c913a3eeb865cb-0' }
withName: '(.+:)?CNVKIT_ANTITARGET' { container = 'quay/biocontainers/cnvkit:0.9.9--pyhdfd78af_0' }
withName: '(.+:)?CNVKIT_REFERENCE' { container = 'quay/biocontainers/cnvkit:0.9.9--pyhdfd78af_0' }
withName: '(.+:)?ENSEMBLVEP' { container = 'quay/biocontainers/ensembl-vep:106.1--pl5321h4a94de4_0' }
withName: '(.+:)?SNPEFF' { container = 'quay/biocontainers/snpeff:5.1--hdfd78af_2' }
withName: '(.+:)?BWA_INDEX' { container = 'quay/biocontainers/bwa:0.7.17--hed695b0_7' }
withName: '(.+:)?BWA_MEM' { container = 'quay/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:219b6c272b25e7e642ae3ff0bf0c5c81a5135ab4-0' }
withName: '(.+:)?STRELKA_GERMLINE' { container = 'quay/biocontainers/strelka:2.9.10--h9ee0642_1' }
withName: '(.+:)?STRELKA_SOMATIC' { container = 'quay/biocontainers/strelka:2.9.10--h9ee0642_1' }
withName: '(.+:)?DRAGMAP_ALIGN' { container = 'quay/biocontainers/mulled-v2-580d344d9d4a496cd403932da8765f9e0187774d:5ebebbc128cd624282eaa37d2c7fe01505a91a69-0' }
withName: '(.+:)?DRAGMAP_HASHTABLE' { container = 'quay/biocontainers/dragmap:1.3.0--h72d16da_1' }
withName: '(.+:)?CONTROLFREEC_FREEC2BED' { container = 'quay/biocontainers/control-freec:11.6--h1b792b2_1' }
withName: '(.+:)?CONTROLFREEC_FREEC2CIRCOS' { container = 'quay/biocontainers/control-freec:11.6--h1b792b2_1' }
withName: '(.+:)?CONTROLFREEC_FREEC' { container = 'quay/biocontainers/control-freec:11.6--h1b792b2_1' }
withName: '(.+:)?CONTROLFREEC_MAKEGRAPH' { container = 'quay/biocontainers/control-freec:11.6--h1b792b2_1' }
withName: '(.+:)?CONTROLFREEC_ASSESSSIGNIFICANCE' { container = 'quay/biocontainers/control-freec:11.6--h1b792b2_1' }
withName: '(.+:)?SAMBLASTER' { container = 'quay/biocontainers/mulled-v2-19fa9f1a5c3966b63a24166365e81da35738c5ab:cee56b506ceb753d4bbef7e05b81e1bfc25d937f-0' }
withName: '(.+:)?FASTQC' { container = 'quay/biocontainers/fastqc:0.11.9--0' }
withName: '(.+:)?SAMTOOLS_BAM2FQ' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_MERGE' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_MPILEUP' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_FAIDX' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_VIEW' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_INDEX' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_COLLATEFASTQ' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_STATS' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?SAMTOOLS_CONVERT' { container = 'quay/biocontainers/samtools:1.16.1--h6899075_1' }
withName: '(.+:)?CUSTOM_DUMPSOFTWAREVERSIONS' { container = 'quay/biocontainers/multiqc:1.13--pyhdfd78af_0' }
withName: '(.+:)?ASCAT' { container = 'quay/biocontainers/mulled-v2-c278c7398beb73294d78639a864352abef2931ce:dfe5aaa885de434adb2b490b68972c5840c6d761-0' }
withName: '(.+:)?DEEPVARIANT' { container = 'ecr-public/aws-genomics/google/deepvariant:1.4.0' }
withName: '(.+:)?GATK4_INTERVALLISTTOBED' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_CALCULATECONTAMINATION' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_APPLYBQSR_SPARK' { container = 'broadinstitute/gatk:4.3.0.0' }
withName: '(.+:)?GATK4_FILTERMUTECTCALLS' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_APPLYVQSR' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_GENOMICSDBIMPORT' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_LEARNREADORIENTATIONMODEL' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_MARKDUPLICATES_SPARK' { container = 'broadinstitute/gatk:4.3.0.0' }
withName: '(.+:)?GATK4_VARIANTRECALIBRATOR' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_GATHERBQSRREPORTS' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_GETPILEUPSUMMARIES' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_GENOTYPEGVCFS' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_CREATESEQUENCEDICTIONARY' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_GATHERPILEUPSUMMARIES' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_ESTIMATELIBRARYCOMPLEXITY' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_HAPLOTYPECALLER' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_CNNSCOREVARIANTS' { container = 'broadinstitute/gatk:4.3.0.0' }
withName: '(.+:)?GATK4_BASERECALIBRATOR' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_APPLYBQSR' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_BASERECALIBRATOR_SPARK' { container = 'broadinstitute/gatk:4.3.0.0' }
withName: '(.+:)?GATK4_MERGEVCFS' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_FILTERVARIANTTRANCHES' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_MARKDUPLICATES' { container = 'quay/biocontainers/mulled-v2-d9e7bad0f7fbc8f4458d5c3ab7ffaaf0235b59fb:551156018e5580fb94d44632dfafbc9c27005a0e-0' }
withName: '(.+:)?GATK4_MUTECT2' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?GATK4_MERGEMUTECTSTATS' { container = 'quay/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0' }
withName: '(.+:)?FREEBAYES' { container = 'quay/biocontainers/freebayes:1.3.6--hbfe0e7f_2' }
withName: '(.+:)?FASTP' { container = 'quay/biocontainers/fastp:0.23.2--h79da9fb_0' }

    // sarek on omics specific
    withName: '(.*:)?GATK4_.*' {
        errorStrategy = 'retry'
    }
    maxRetries = 2
    withLabel:process_single {
        cpus          = { check_max( 2                  , 'cpus'    ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
}
